#!/bin/bash
# Author: Gao Mingjie (jackgo73@outlook.com)

# reset global variables
OPTIND=1

gflag=""
garg=""
sarg=""
error=off

PG_PORT_PRE=84
PG_DIR_PRE=$HOME/databases

MY_PORT_PRE=73
MY_DIR_PRE=$HOME/databases

# 
usage()
{
cat <<EOF
genv
Description: A simplistic tool for db-deployment.
Usage: genv -s [num] 
       genv -s [num] -c [options]
       genv -a ~/.bashrc
  -a  add alias to .bash* file
  -c  Cheetsheet
      sys    :  system installation help
      pgutil :  pgsql statements
 

Examples:
  source genv 00
  genv -a ~/.bashrc
  genv -c sys
  genv -c pginit
  genv -c pgutility
EOF
}

set_alias()
{
	# $1 is not use
	if grep -q "genv" $2; then
   		echo "[LOG] genv already exists in $2"
	else
		echo "[LOG] set alias in $2"
   		echo "alias pp=\"source `pwd`/`basename $0` -s\"" >> $2
	fi
	echo "[LOG] grep \"genv\" in $2"
	echo -e "[LOG] \c"
	grep "genv" $2
}

cheetsheet()
{
# $1 is not use
############################################################
if [[ $2 == "sys" ]]; then
############################################################	
cat << EOF
============================================================
[GIT Config]
git config --global user.email "jackgo73@outlook.com"
git config --global user.name "Jack Go"
============================================================
[SSH]
ssh-keygen -t rsa -b 4096 -C "jackgo73@outlook.com"
============================================================
[GIT Shadowsockets]
git config --global http.proxy 'socks5://127.0.0.1:1091' 
git config --global https.proxy 'socks5://127.0.0.1:1091'
============================================================
[SAMBA]
yum install samba samba-client 
vim /etc/samba/smb.conf
[homes]
  comment = Home Directories
  browseable = Yes
  read only = No
  valid users = jackgo

smbpasswd -a jackgo
firewall-cmd --permanent --zone=public --add-service=samba
firewall-cmd --reload
#setsebool -P samba_enable_home_dirs on
#setsebool -P samba_export_all_rw on
setenforce 0
vi /etc/selinux/config
SELINUX=disabled
# no need to "setenforce 0"
# no need to "systemctl stop firewalld.service"
# no need to "systemctl disable  firewalld.service
systemctl enable smb nmb
systemctl restart smb nmb
============================================================
[CORE]
echo core.%e.%p.SIG%s.%t > /proc/sys/kernel/core_pattern
echo 63 > /proc/self/coredump_filter # include shared memory
ulimit -c unlimited
============================================================
[GDB]
handle SIGUSR1 noprint pass
EOF
############################################################
elif [[ $2 == "pginit" ]]; then
############################################################
cat << EOF
============================================================
wget -S https://ftp.postgresql.org/pub/source/v9.6.8/postgresql-9.6.8.tar.gz
wget -S https://ftp.postgresql.org/pub/source/v10.3/postgresql-10.3.tar.gz
============================================================
yum -y install coreutils glib2 lrzsz sysstat e4fsprogs xfsprogs ntp readline-devel zlib zlib-devel openssl openssl-devel pam-devel libxml2-devel libxslt-devel python-devel tcl-devel gcc make smartmontools flex bison perl perl-devel perl-ExtUtils* openldap openldap-devel
============================================================
./configure --prefix=$PG_DIR_PRE/pgsql$PG_PORT_PRE$1 --with-openssl --enable-debug --enable-cassert --enable-thread-safety CFLAGS='-O0' --with-pgport=$PG_PORT_PRE$1 --enable-depend;
./configure --prefix=$PG_DIR_PRE/pgsql$PG_PORT_PRE$1 --with-openssl --enable-debug --enable-cassert --enable-thread-safety CFLAGS='-ggdb -Og -g3 -fno-omit-frame-pointer' --with-pgport=$PG_PORT_PRE$1 --enable-depend;
make -sj12;
make install;
============================================================
initdb -D $PGDATA -E UTF8 --locale=C -U postgres -X $PGDATA/pg_xlog$PGPORT
============================================================
sed -ir "s/#*unix_socket_directories.*/unix_socket_directories = '.'/" $PGDATA/postgresql.conf
sed -ir "s/#*unix_socket_permissions.*/unix_socket_permissions = 0700/" $PGDATA/postgresql.conf
sed -ir "s/#*max_connections.*/max_connections = 800/" $PGDATA/postgresql.conf
sed -ir "s/#*superuser_reserved_connections.*/superuser_reserved_connections = 13/" $PGDATA/postgresql.conf
sed -ir "s/#*logging_collector.*/logging_collector= on/" $PGDATA/postgresql.conf
sed -ir "s/#*log_directory.*/log_directory = 'pg_log'/" $PGDATA/postgresql.conf
sed -ir "s/#*log_filename.*/log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'/" $PGDATA/postgresql.conf
sed -ir "s/#*log_rotation_size.*/log_rotation_size = 10MB/" $PGDATA/postgresql.conf
sed -ir "s/#*log_line_prefix.*/log_line_prefix='%p %r %u %d %t %e'/" $PGDATA/postgresql.conf
sed -ir "s/#*log_min_duration_statement.*/log_min_duration_statement= 1000/" $PGDATA/postgresql.conf
sed -ir "s/#*log_timezone.*/log_timezone = 'UTC'/" $PGDATA/postgresql.conf
sed -ir "s/#*log_truncate_on_rotation.*/log_truncate_on_rotation = on/" $PGDATA/postgresql.conf
sed -ir "s/#*log_rotation_age.*/log_rotation_age = 0/" $PGDATA/postgresql.conf
sed -ir "s/#*log_statement.*/log_statement= 'all'/" $PGDATA/postgresql.conf
sed -ir "s/#*max_prepared_transactions.*/max_prepared_transactions= 800/" $PGDATA/postgresql.conf
============================================================
EOF
############################################################
elif [[ $2 == "pgutil" ]]; then
############################################################
cat << EOF
==========================================================================
[keep updating]
create unlogged table test03 (id int primary key, info text);
create table test03 (id int primary key, info text);

\set id random(1,100)
insert into test03 values(:id, repeat(md5(random()::text), 1000)) on conflict on constraint test03_pkey do update set info=excluded.info;

pgbench -M prepared -n -r -P 1 -f ./test.sql -c 48 -j 48 -T 10000000
==========================================================================
[generate 1000w random tuples]
create table tbl(c1 int, c2 int, c3 int);
create index idx1 on tbl(c1,c2);
insert into tbl select mod(trunc(random()*10000)::int, 10000), trunc(random()*10000000) from generate_series(1,10000000);
==========================================================================
create table t1(id int, info text, crt_time timestamp);
create table t2(id int, info text, crt_time timestamp);
create table t3(id int, info text, crt_time timestamp);
create table t4(id int, info text, crt_time timestamp);
create table t5(id int, info text, crt_time timestamp);
create table t6(id int, info text, crt_time timestamp);
create table t7(id int, info text, crt_time timestamp);
create table t8(id int, info text, crt_time timestamp);
insert into t1 select generate_series(1,2000000),md5(random()::text),clock_timestamp();
insert into t2 select generate_series(1,1500000),md5(random()::text),clock_timestamp();
insert into t3 select generate_series(1,1000000),md5(random()::text),clock_timestamp();
insert into t4 select generate_series(1,3000000),md5(random()::text),clock_timestamp();
insert into t5 select generate_series(1,4000000),md5(random()::text),clock_timestamp();
insert into t6 select generate_series(1,1000000),md5(random()::text),clock_timestamp();
insert into t7 select generate_series(1,1000000),md5(random()::text),clock_timestamp();
insert into t8 select generate_series(1,5000000),md5(random()::text),clock_timestamp();
drop table t1,t2,t3,t4,t5,t6,t7,t8;
==========================================================================
create table t8(id int, info int[]);
insert into t8 select generate_series(1,10000),'{1,1,2,2,3,3,4,4}'::int[];
insert into t8 select generate_series(1,1000000),'{100,200}'::int[];
select * from pg_stats where tablename='t8' and attname='info';
create table j8(id int, info int);
insert into j8 select generate_series(1,10000),10;
insert into j8 select generate_series(1,20000),20;
insert into j8 select generate_series(1,30000),30;
select * from pg_stats where tablename='j8' and attname='info';
==========================================================================
date;pg_dump -f ./pgsql.dmp -F d -E UTF8 -j 8 -h $PGDATA -p 8400 -U postgres postgres;date
postgres=# select pid,database,relation,locktype,mode,granted,relname from pg_locks t1,pg_class t2 where t1.relation=t2.oid  and pid in (28381,28375) order by pid,relation;
  pid  | database | relation | locktype |      mode       | granted | relname 
-------+----------+----------+----------+-----------------+---------+---------
 28375 |    13323 |    16438 | relation | AccessShareLock | t       | t8

postgres=# select pid,database,relation,locktype,mode,granted,relname from pg_locks t1,pg_class t2 where t1.relation=t2.oid  and pid in (28381) order by pid,relation;
  pid  | database | relation | locktype |      mode       | granted | relname 
-------+----------+----------+----------+-----------------+---------+---------
 28375 |    13323 |    16438 | relation | AccessShareLock | t       | t8
==========================================================================
EOF
elif [[ $2 == "plproxy" ]]; then
############################################################
cat << EOF
==========================================================================
wget -S https://github.com/plproxy/plproxy/archive/plproxy_2_8.tar.gz
tar xzvf plproxy_2_8.tar.gz
gmake clean;gmake;gmake install
create role proxy nosuperuser login encrypted password 'proxy';
create database proxy;
\c proxy
create extension plproxy;
grant all on database proxy to proxy;
\c proxy proxy
create schema pl;
\c postgres postgres
grant all on schema pl to proxy;
create role jackgo nosuperuser login encrypted password '333';
create database db0;
create database db1;
create database db2;
create database db3;
grant all on database db0 to jackgo;
grant all on database db1 to jackgo;
grant all on database db2 to jackgo;
grant all on database db3 to jackgo;
==========================================================================
\c proxy postgres
CREATE SERVER cluster_srv1 FOREIGN DATA WRAPPER plproxy options   
(connection_lifetime '1800',  
p0 'dbname=db0 hostaddr=127.0.0.1 port=8400 application_name=test',  
p1 'dbname=db1 hostaddr=127.0.0.1 port=8400',  
p2 'dbname=db2 hostaddr=127.0.0.1 port=8400',  
p3 'dbname=db3 hostaddr=127.0.0.1 port=8400');
grant usage on FOREIGN server cluster_srv1 to proxy;
create user mapping for proxy server cluster_srv1 options (user 'jackgo');
==========================================================================
vi \$PGDATA/pg_hba.conf  
host db0 jackgo 127.0.0.1/32 trust  
host db1 jackgo 127.0.0.1/32 trust  
host db2 jackgo 127.0.0.1/32 trust  
host db3 jackgo 127.0.0.1/32 trust  
pg_ctl reload  
==========================================================================
[proxy node]
CREATE OR REPLACE FUNCTION pl.dy(sql text)                    
 RETURNS SETOF record  
 LANGUAGE plproxy  
 STRICT  
AS \$function\$  
  cluster 'cluster_srv1';  
  run on all;  
\$function\$;
grant execute on function pl.dy(text) to proxy;
==========================================================================
[data node]
\c db0 jackgo
create schema pl;
CREATE OR REPLACE FUNCTION pl.dy(sql text)  
 RETURNS SETOF record  
 LANGUAGE plpgsql  
 STRICT  
AS \$function\$  
  declare  
  rec record;  
  begin  
    for rec in execute sql loop  
      return next rec;  
    end loop;  
    return;  
  end;  
\$function\$;
\c db1 jackgo
\c db2 jackgo
\c db3 jackgo

select * from pl.dy('select count(*) from pg_class') as t(i int8);
select sum(i) from pl.dy('select count(*) from pg_class') as t(i int8);
==========================================================================
[run on 4]
\c db0 jackgo
create table t(id int);
create or replace function pl.f_test4() returns int as $$  
declare  
begin  
insert into t(id) values (1);  
return 0;  
end;  
\$$ language plpgsql strict;  

\c db1 jackgo
create table t(id int);
create or replace function pl.f_test4() returns int as $$  
declare  
begin  
insert into t(id) values (1);  
return 1;  
end;  
\$$ language plpgsql strict;

\c db2 jackgo
create table t(id int);
create or replace function pl.f_test4() returns int as \$$  
declare  
begin  
insert into t(id) values (1);  
return 2;  
end;  
\$$ language plpgsql strict;

\c db3 jackgo
create table t(id int);
create or replace function pl.f_test4() returns int as \$$  
declare  
begin  
insert into t(id) values (1);  
return 3;  
end;  
\$$ language plpgsql strict;

\c proxy postgres
create or replace function pl.f_test4() returns int as \$$  
cluster 'cluster_srv1';  
run on 0; 
\$$ language plproxy strict;
grant execute on function pl.f_test4() to proxy;

\c proxy proxy
select * from pl.f_test4();
==========================================================================
[run on function()]
create or replace function pl.f(int) returns int as \$\$  
select \$1;  
\$\$ language sql strict;
\c proxy postgres
create or replace function pl.f_test4() returns int as \$\$  
cluster 'cluster_srv1';  
run on pl.f(1);    
\$\$ language plproxy strict;  

select pl.f_test4();

https://yq.aliyun.com/articles/59345
==========================================================================
EOF
fi
}

while getopts "a:c:s:h" opt; do
	case "$opt" in
		\?) echo "[ERROR] Invalid option: -$OPTARG" >&2
			error=on
			;;
		h)  usage
			exit 0
			;;
		a)  if [[ $gflag == "" ]]; then
				gflag="alias"
				garg=$OPTARG
			else
				echo "[ERROR] all flags are mutually exclusive"
				error=on
			fi
			;;
		c)  if [[ $gflag == "" ]]; then
				gflag="cheetsheet"
				garg=$OPTARG
			else
				echo "[ERROR] all flags are mutually exclusive"
				error=on
			fi
			;;
		s)  if [[ $sarg == "" ]]; then
				sarg=$OPTARG
			else
				echo "[ERROR] -s are mutually exclusive"
				error=on
			fi
	esac
done

if [[ $sarg == "" ]]; then
	echo "[ERROR] need -s"
	error=on
fi

if [ $error == on ]; then
	echo "[ERROR] something went wrong, do nothing"
else
###########################################################
# [START]SOURCE

	export PS1="[\u@\h \w][$sarg]\\$ "
	export PGPORT=$PG_PORT_PRE$sarg
	export PGDATA=$PG_DIR_PRE/data/pgdata$PGPORT
	export LANG=en_US.utf8
	export PGHOME=$PG_DIR_PRE/pgsql$PGPORT
	#export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH
	export DATE=`date +"%Y%m%d%H%M"`
	export MANPATH=$PGHOME/share/man:$MANPATH
	export PGHOST=$PGDATA
	export PGUSER=postgres
	export PGDATABASE=postgres

	if [[ $PATH =~ $PGHOME/bin ]]
	then
	  :
	else
	  export PATH=$PGHOME/bin:$PATH
	fi

	export MYSQLPORT=$MY_PORT_PRE$sarg
	export MYSQLHOME=$MY_DIR_PRE/mysql$MYSQLPORT
	export MYSQLDATA=$MY_DIR_PRE/data/mydata$MYSQLPORT

	if [[ $PATH =~ $MYSQLHOME/bin ]]
	then
	  :
	else
	  export PATH=$PGHOME/bin:$MYSQLHOME/bin:$PATH:.
	fi
# [END]SOURCE
############################################################
	if [[ $gflag == "alias" ]]; then
		set_alias "ph" $garg
	elif [[ $gflag == "cheetsheet" ]]; then
		cheetsheet $sarg $garg
	fi
fi

unset gflag
unset garg
unset sarg
unset PG_PORT_PRE
unset PG_DIR_PRE
unset MY_PORT_PRE
unset MY_DIR_PRE
