#!/bin/sh
# Gaomingjie - 20180527 

# -- envs --

TEMP=/tmp
LOGFILE=$TEMP/SetupSSH_`date +%F-%H-%M-%S`.log

# -- global --

nargs=$#
n=1
logfile=$LOGFILE
platform=`uname -s`
confirm=no



# -- function --

usage()
{
cat <<EOF
$0
Description: 

Usage: 
    sshUserSetup.sh  
        -user <user name> 
        -hosts \"<space separated hostlist>\" | -hostfile <absolute path of cluster configuration file>
Examples:

EOF
}

verify_bins()
{
SSH="/usr/bin/ssh"
SCP="/usr/bin/scp"
SSH_KEYGEN="/usr/bin/ssh-keygen"
PING="/bin/ping"

PATH_ERROR=0
if test ! -x $SSH ; then
  echo "ssh not found at $SSH. Please set the variable SSH_PATH to the correct location of ssh and retry."
  PATH_ERROR=1
fi 
if test ! -x $SCP ; then
  echo "scp not found at $SCP. Please set the variable SCP_PATH to the correct location of scp and retry."
  PATH_ERROR=1
fi 
if test ! -x $SSH_KEYGEN ; then
  echo "ssh-keygen not found at $SSH_KEYGEN. Please set the variable SSH_KEYGEN_PATH to the correct location of ssh-keygen and retry."
  PATH_ERROR=1
fi 
if test ! -x $PING ; then
  echo "ping not found at $PING. Please set the variable PING_PATH to the correct location of ping and retry."
  PATH_ERROR=1
fi 
if [ $PATH_ERROR = 1 ]; then
  echo "ERROR: one or more of the required binaries not found, exiting"
  exit 1
fi
}

verify_params()
{
if test -z "$hosts"; then
  if test -n "$host_file" && test -f "$host_file"; then
    hosts=`awk '$1 !~ /^#/ { str = str " " $1 } END { print str }' $host_file` 
  elif ! test -f "$host_file"; then
    echo "Please specify a valid and existing hosts file."
  fi
fi

if  test -z "$hosts" || test -z $user
then
echo "Either user name or host information is missing"
usage
exit 1
fi

if [ -d $logfile ]; then
  echo $logfile is a directory, setting logfile to $logfile/ssh.log
  logfile=$logfile/ssh.log
fi

echo The output of this script is also logged into $logfile | tee -a $logfile

if [ `echo $?` != 0 ]; then
  echo Error writing to the logfile $logfile, Exiting
  exit 1
fi

echo Hosts are $hosts | tee -a $logfile
echo User is  $user | tee -a $logfile

}

verify_os()
{
  case "$platform" in
    "Linux")  os=linux;;
          *)  echo "Sorry, $platform is not currently supported." | tee -a $LOGFILE
              exit 1;;
  esac
  echo "Platform: $platform " | tee -a $LOGFILE
}

verify_hosts()
{
echo Checking if the remote hosts are reachable. | tee -a $LOGFILE
for host in $hosts; do
  $PING -c 5 -w 5 $host
  exitcode=`echo $?`
  if [ $exitcode = 0 ]; then
    alivehosts="$alivehosts $host"
  else
    deadhosts="$deadhosts $host"
  fi
done

if test -z "$deadhosts"
then
  echo Remote host reachability check succeeded.  | tee -a $LOGFILE
  echo The following hosts are reachable: $alivehosts.  | tee -a $LOGFILE
  echo The following hosts are not reachable: $deadhosts.  | tee -a $LOGFILE
  echo All hosts are reachable. Proceeding further...  | tee -a $LOGFILE
else
  echo Remote host reachability check failed.  | tee -a $LOGFILE
  echo The following hosts are reachable: $alivehosts.  | tee -a $LOGFILE
  echo The following hosts are not reachable: $deadhosts.  | tee -a $LOGFILE
  echo Please ensure that all the hosts are up and re-run the script.  | tee -a $LOGFILE
  echo Exiting now...  | tee -a $LOGFILE
   exit 1
fi

numhosts=`echo $hosts | awk '{ }; END {print NF}'`
echo Hosts number: $numhosts
}

# -- entry --

while [ $n -le $nargs ]; do
  par=$1

  if [ $par = "-help" ]; then
    usage
    exit
  fi

  if [ $par = "-hosts" ] 
  then
     hosts=$2
     shift 1
     n=`expr $n + 1`
  fi

  if [ $par = "-hostfile" ] 
  then
     host_file=$2
     shift 1
     n=`expr $n + 1`
  fi

  if [ $par = "-user" ] 
  then
     user=$2
     shift 1
     n=`expr $n + 1`
  fi

  if [ $par = "-logfile" ] 
  then
     logfile=$2
     shift 1
     n=`expr $n + 1`
  fi

  if [ $par = "-confirm" ] 
  then
     confirm=yes
  fi

  # shift if no match
  shift 1
  n=`expr $n + 1`
done

verify_params
verify_os
verify_bins
verify_hosts

echo The script will setup SSH connectivity from the host ''`hostname`'' to all  | tee -a $logfile 
echo the remote hosts. After the script is executed, the user can use SSH to run | tee -a $logfile 
echo commands on the remote hosts or copy files between this host ''`hostname`'' | tee -a $logfile 
echo and the remote hosts without being prompted for passwords or confirmations. | tee -a $logfile 
echo | tee -a $logfile 
echo "Do you want to continue and let the script make the above mentioned changes (yes/no)?" | tee -a $logfile 

if [ "$confirm" = "no" ] 
then 
  read confirm 
else
  echo "Confirmation provided on the command line" | tee -a $logfile
fi 

echo  | tee -a $logfile 
echo The user chose ''$CONFIRM'' | tee -a $logfile 



